{"version":3,"sources":["/home/rtorres/Documents/dev/prod/nobleCrmFront-End/node_modules/@ngx-loading-bar/core/fesm2015/ngx-loading-bar-core.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAmHC,sIAGC;;;;;;;;;;;;kCAK8N;;;;;;;;;;;;;;;;;;;;;;;;;;CAiB/N,m5DAuBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAaA;;;;;;;;;CAOD;;;;;;;;;0BAOC","file":"ngx-loading-bar-core.js","sourcesContent":["import { Injectable, PLATFORM_ID, Inject, NgModule, Component, Input, ViewEncapsulation, defineInjectable, inject } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { isPlatformBrowser, CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass LoadingBarService {\n    /**\n     * @param {?} platformId\n     */\n    constructor(platformId) {\n        this.platformId = platformId;\n        this.progress$ = (/** @type {?} */ ((new Subject()).pipe(debounceTime(0))));\n        this._pendingRequests = 0;\n        this._value = 0;\n    }\n    /**\n     * @param {?=} initialValue\n     * @return {?}\n     */\n    start(initialValue = 2) {\n        ++this._pendingRequests;\n        if (this._value === 0 || this._pendingRequests === 1) {\n            // Inserts the loading bar element into the dom, and sets it to 2%\n            this.set(this._pendingRequests === 1 && this._value > 0 ? this._value : initialValue);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    stop() {\n        this.complete();\n        while (this._pendingRequests > 0) {\n            this.complete();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    complete() {\n        if (this._pendingRequests === 0 && this._value === 0) {\n            return;\n        }\n        if (this._pendingRequests > 0) {\n            --this._pendingRequests;\n        }\n        if (this._pendingRequests === 0 || (this._pendingRequests === 0 && this._value > 0)) {\n            if (this._value !== 100) {\n                this.set(100);\n            }\n            // Attempt to aggregate any start/complete calls within 500ms:\n            setTimeout(() => this.set(0), 500);\n        }\n    }\n    /**\n     * Set the loading bar's width to a certain percent.\n     *\n     * @param {?} n any value between 0 and 100\n     * @return {?}\n     */\n    set(n) {\n        if (!isPlatformBrowser(this.platformId)) {\n            this._pendingRequests = 0;\n            return;\n        }\n        if (n === 0 && this._pendingRequests > 0) {\n            n = 2;\n        }\n        this._value = n;\n        this.progress$.next(n);\n        if (this._pendingRequests === 0) {\n            return;\n        }\n        // increment loadingbar to give the illusion that there is always\n        // progress but make sure to cancel the previous timeouts so we don't\n        // have multiple incs running at the same time.\n        clearTimeout(this._incTimeout);\n        if (this._value > 0 && this._value < 100) {\n            this._incTimeout = setTimeout(() => this.increment(), 250);\n        }\n    }\n    /**\n     * Increments the loading bar by a random amount\n     * but slows down as it progresses\n     * @param {?=} rnd\n     * @return {?}\n     */\n    increment(rnd = 0) {\n        if (rnd > 0) {\n            this.set(this._value + rnd);\n        }\n        /** @type {?} */\n        const stat = this._value;\n        if (stat >= 0 && stat < 25) {\n            // Start out between 3 - 6% increments\n            rnd = (Math.random() * (5 - 3 + 1) + 3);\n        }\n        else if (stat >= 25 && stat < 65) {\n            // increment between 0 - 3%\n            rnd = (Math.random() * 3);\n        }\n        else if (stat >= 65 && stat < 90) {\n            // increment between 0 - 2%\n            rnd = (Math.random() * 2);\n        }\n        else if (stat >= 90 && stat < 99) {\n            // finally, increment it .5 %\n            rnd = 0.5;\n        }\n        else {\n            // after 99%, don't increment:\n            rnd = 0;\n        }\n        this.set(this._value + rnd);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.progress$.complete();\n    }\n}\nLoadingBarService.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\n/** @nocollapse */\nLoadingBarService.ctorParameters = () => [\n    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\n];\n/** @nocollapse */ LoadingBarService.ngInjectableDef = defineInjectable({ factory: function LoadingBarService_Factory() { return new LoadingBarService(inject(PLATFORM_ID)); }, token: LoadingBarService, providedIn: \"root\" });\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass LoadingBarComponent {\n    /**\n     * @param {?} loader\n     */\n    constructor(loader) {\n        this.loader = loader;\n        this.includeSpinner = true;\n        this.includeBar = true;\n        this.fixed = true;\n        this.value = null;\n    }\n}\nLoadingBarComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'ngx-loading-bar',\n                template: `\n    <ng-container *ngIf=\"(value !== null ? value : loader.progress$|async) as progress\">\n      <div id=\"loading-bar-spinner\" *ngIf=\"includeSpinner\" [style.color]=\"color\">\n        <div [style.width]=\"diameter\" [style.height]=\"diameter\" class=\"spinner-icon\"></div>\n      </div>\n      <div id=\"loading-bar\" *ngIf=\"includeBar\" [style.color]=\"color\">\n        <div class=\"bar\" [style.background]=\"color\" [style.height]=\"height\" [style.width]=\"progress + '%'\">\n          <div class=\"peg\" [style.height]=\"height\"></div>\n        </div>\n      </div>\n    </ng-container>\n  `,\n                preserveWhitespaces: false,\n                encapsulation: ViewEncapsulation.Emulated,\n                host: {\n                    '[class.loading-bar-fixed]': 'fixed',\n                },\n                styles: [\":host{position:relative;display:block}:host.loading-bar-fixed>div .bar{position:fixed}:host.loading-bar-fixed>div#loading-bar-spinner{position:fixed;top:10px;left:10px}[dir=rtl] :host.loading-bar-fixed>div#loading-bar-spinner{right:10px;left:unset}:host.loading-bar-fixed>div .peg{display:block}:host>div{pointer-events:none;transition:350ms linear;color:#29d}:host>div .bar{transition:width 350ms;background:#29d;position:absolute;z-index:10002;top:0;left:0;width:100%;height:2px;border-bottom-right-radius:1px;border-top-right-radius:1px}[dir=rtl] :host>div .bar{right:0;left:unset}:host>div .peg{display:none;position:absolute;width:70px;right:0;top:0;height:2px;opacity:.45;box-shadow:1px 0 6px 1px;color:inherit;border-radius:100%}:host>div#loading-bar-spinner{display:block;position:absolute;z-index:10002;top:5px;left:0}:host>div#loading-bar-spinner .spinner-icon{width:14px;height:14px;border:2px solid transparent;border-top-color:inherit;border-left-color:inherit;border-radius:50%;-webkit-animation:.4s linear infinite loading-bar-spinner;animation:.4s linear infinite loading-bar-spinner}@-webkit-keyframes loading-bar-spinner{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes loading-bar-spinner{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}\"]\n            }] }\n];\n/** @nocollapse */\nLoadingBarComponent.ctorParameters = () => [\n    { type: LoadingBarService }\n];\nLoadingBarComponent.propDecorators = {\n    includeSpinner: [{ type: Input }],\n    includeBar: [{ type: Input }],\n    fixed: [{ type: Input }],\n    color: [{ type: Input }],\n    height: [{ type: Input }],\n    diameter: [{ type: Input }],\n    value: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass LoadingBarModule {\n}\nLoadingBarModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule],\n                declarations: [LoadingBarComponent],\n                exports: [LoadingBarComponent],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { LoadingBarModule, LoadingBarComponent, LoadingBarService };\n"]}