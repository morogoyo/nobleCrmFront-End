{"version":3,"sources":["/home/rtorres/Documents/dev/prod/nobleCrmFront-End/node_modules/angular2-text-mask/dist/angular2TextMask.js"],"names":[],"mappings":"AAAA;;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA0FM,AAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBASA;;;;;;KAMD,AAMC;;;;;;;;;;;;gDAEyD","file":"angular2TextMask.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar forms_1 = require(\"@angular/forms\");\nvar platform_browser_1 = require(\"@angular/platform-browser\");\nvar textMaskCore_1 = require(\"text-mask-core/dist/textMaskCore\");\nvar TextMaskConfig = /** @class */ (function () {\n    function TextMaskConfig() {\n    }\n    return TextMaskConfig;\n}());\nexports.TextMaskConfig = TextMaskConfig;\nexports.MASKEDINPUT_VALUE_ACCESSOR = {\n    provide: forms_1.NG_VALUE_ACCESSOR,\n    useExisting: core_1.forwardRef(function () { return MaskedInputDirective; }),\n    multi: true\n};\n/**\n * We must check whether the agent is Android because composition events\n * behave differently between iOS and Android.\n */\nfunction _isAndroid() {\n    var userAgent = platform_browser_1.ɵgetDOM() ? platform_browser_1.ɵgetDOM().getUserAgent() : '';\n    return /android (\\d+)/.test(userAgent.toLowerCase());\n}\nvar MaskedInputDirective = /** @class */ (function () {\n    function MaskedInputDirective(_renderer, _elementRef, _compositionMode) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this._compositionMode = _compositionMode;\n        this.textMaskConfig = {\n            mask: [],\n            guide: true,\n            placeholderChar: '_',\n            pipe: undefined,\n            keepCharPositions: false,\n        };\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n        /** Whether the user is creating a composition string (IME events). */\n        this._composing = false;\n        if (this._compositionMode == null) {\n            this._compositionMode = !_isAndroid();\n        }\n    }\n    MaskedInputDirective.prototype.ngOnChanges = function (changes) {\n        this._setupMask(true);\n        if (this.textMaskInputElement !== undefined) {\n            this.textMaskInputElement.update(this.inputElement.value);\n        }\n    };\n    MaskedInputDirective.prototype.writeValue = function (value) {\n        this._setupMask();\n        // set the initial value for cases where the mask is disabled\n        var normalizedValue = value == null ? '' : value;\n        this._renderer.setProperty(this.inputElement, 'value', normalizedValue);\n        if (this.textMaskInputElement !== undefined) {\n            this.textMaskInputElement.update(value);\n        }\n    };\n    MaskedInputDirective.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n    MaskedInputDirective.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n    MaskedInputDirective.prototype.setDisabledState = function (isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    };\n    MaskedInputDirective.prototype._handleInput = function (value) {\n        if (!this._compositionMode || (this._compositionMode && !this._composing)) {\n            this._setupMask();\n            if (this.textMaskInputElement !== undefined) {\n                this.textMaskInputElement.update(value);\n                // get the updated value\n                value = this.inputElement.value;\n                this.onChange(value);\n            }\n        }\n    };\n    MaskedInputDirective.prototype._setupMask = function (create) {\n        if (create === void 0) { create = false; }\n        if (!this.inputElement) {\n            if (this._elementRef.nativeElement.tagName.toUpperCase() === 'INPUT') {\n                // `textMask` directive is used directly on an input element\n                this.inputElement = this._elementRef.nativeElement;\n            }\n            else {\n                // `textMask` directive is used on an abstracted input element, `md-input-container`, etc\n                this.inputElement = this._elementRef.nativeElement.getElementsByTagName('INPUT')[0];\n            }\n        }\n        if (this.inputElement && create) {\n            this.textMaskInputElement = textMaskCore_1.createTextMaskInputElement(Object.assign({ inputElement: this.inputElement }, this.textMaskConfig));\n        }\n    };\n    MaskedInputDirective.prototype._compositionStart = function () { this._composing = true; };\n    MaskedInputDirective.prototype._compositionEnd = function (value) {\n        this._composing = false;\n        this._compositionMode && this._handleInput(value);\n    };\n    MaskedInputDirective.decorators = [\n        { type: core_1.Directive, args: [{\n                    host: {\n                        '(input)': '_handleInput($event.target.value)',\n                        '(blur)': 'onTouched()',\n                        '(compositionstart)': '_compositionStart()',\n                        '(compositionend)': '_compositionEnd($event.target.value)'\n                    },\n                    selector: '[textMask]',\n                    exportAs: 'textMask',\n                    providers: [exports.MASKEDINPUT_VALUE_ACCESSOR]\n                },] },\n    ];\n    /** @nocollapse */\n    MaskedInputDirective.ctorParameters = function () { return [\n        { type: core_1.Renderer2, },\n        { type: core_1.ElementRef, },\n        { type: undefined, decorators: [{ type: core_1.Optional }, { type: core_1.Inject, args: [forms_1.COMPOSITION_BUFFER_MODE,] },] },\n    ]; };\n    MaskedInputDirective.propDecorators = {\n        'textMaskConfig': [{ type: core_1.Input, args: ['textMask',] },],\n    };\n    return MaskedInputDirective;\n}());\nexports.MaskedInputDirective = MaskedInputDirective;\nvar TextMaskModule = /** @class */ (function () {\n    function TextMaskModule() {\n    }\n    TextMaskModule.decorators = [\n        { type: core_1.NgModule, args: [{\n                    declarations: [MaskedInputDirective],\n                    exports: [MaskedInputDirective]\n                },] },\n    ];\n    /** @nocollapse */\n    TextMaskModule.ctorParameters = function () { return []; };\n    return TextMaskModule;\n}());\nexports.TextMaskModule = TextMaskModule;\nvar textMaskCore_2 = require(\"text-mask-core/dist/textMaskCore\");\nexports.conformToMask = textMaskCore_2.conformToMask;\n"]}